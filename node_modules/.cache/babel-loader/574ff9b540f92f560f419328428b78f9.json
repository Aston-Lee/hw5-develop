{"ast":null,"code":"var _jsxFileName = \"/Users/aston/Documents/GitHub/Rice/COMP 531/comp-531-hw5-develop/src/pages/MainPage.js\",\n    _s = $RefreshSig$();\n\nimport \"./MainPage.css\";\nimport { useEffect, useState } from 'react';\nimport Topbar from \"../components/topbar\";\nimport Post from \"../components/Post\";\nimport Post2 from \"../components/Post2\";\nimport NewPostSection from \"../components/NewPostSection\";\nimport Status from '../components/Status';\nimport axios from 'axios';\nimport { Posts, PostsLeft } from \"../Data\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function MainPage() {\n  _s();\n\n  var _filteredPosts;\n\n  const postarray = Posts;\n  const [PostArray, SetPostPrray] = useState(PostsLeft);\n  const [users, setUsers] = useState();\n  const [posts, setPosts] = useState();\n  let [filteredPosts, setFilteredPosts] = useState([]);\n\n  const getUsersData = async () => {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\").then(response => response.json());\n    setUsers(response);\n  };\n\n  useEffect(() => {\n    getUsersData(); // getPostsData();\n\n    axios.get('https://jsonplaceholder.typicode.com/posts').then(response => {\n      console.log(response.data); // add random timestamp to each post\n\n      const tmpposts = response.data.map(post => {\n        const timestamp = Math.floor(Math.random() * 1000000000000);\n        return { ...post,\n          timestamp\n        };\n      });\n      setPosts(tmpposts);\n    }, error => {\n      console.log(error);\n    });\n  }, []); // console.log(users)\n\n  console.log(posts);\n  var username = localStorage.getItem(\"username\");\n  var newuser = localStorage.getItem(\"newuser\");\n  let followList = [];\n\n  if (newuser === true) {\n    followList = [];\n  } else {\n    followList = [1, 2, 3];\n  }\n\n  filteredPosts = posts === null || posts === void 0 ? void 0 : posts.filter(post => followList.includes(post.userId));\n  console.log(filteredPosts);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"header\", {\n      children: [/*#__PURE__*/_jsxDEV(Topbar, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container\",\n        children: [/*#__PURE__*/_jsxDEV(NewPostSection, {\n          username: localStorage.getItem(\"username\"),\n          posts: posts,\n          setPosts: setPosts\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Status, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"pageformat\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gridformat\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridpost\",\n          tabIndex: 0,\n          children: (_filteredPosts = filteredPosts) === null || _filteredPosts === void 0 ? void 0 : _filteredPosts.sort((a, b) => b.timestamp - a.timestamp).map(post => /*#__PURE__*/_jsxDEV(Post2, {\n            post: post,\n            username: username,\n            newuser: newuser\n          }, post.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"gridformat\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"gridpost\",\n          tabIndex: 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true);\n}\n\n_s(MainPage, \"i/NP9JE6Z3VHBwR813oeqCqeVEY=\");\n\n_c = MainPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"MainPage\");","map":{"version":3,"names":["useEffect","useState","Topbar","Post","Post2","NewPostSection","Status","axios","Posts","PostsLeft","MainPage","postarray","PostArray","SetPostPrray","users","setUsers","posts","setPosts","filteredPosts","setFilteredPosts","getUsersData","response","fetch","then","json","get","console","log","data","tmpposts","map","post","timestamp","Math","floor","random","error","username","localStorage","getItem","newuser","followList","filter","includes","userId","sort","a","b","id"],"sources":["/Users/aston/Documents/GitHub/Rice/COMP 531/comp-531-hw5-develop/src/pages/MainPage.js"],"sourcesContent":["\nimport \"./MainPage.css\";\n\nimport { useEffect, useState } from 'react';\n\nimport Topbar from \"../components/topbar\";\nimport Post from \"../components/Post\"\nimport Post2 from \"../components/Post2\"\nimport NewPostSection from \"../components/NewPostSection\"\nimport Status from '../components/Status';\nimport axios from 'axios';\n\nimport { Posts, PostsLeft } from \"../Data\"\n\n\nexport default function MainPage() {\n\n    const postarray = Posts\n    const [PostArray, SetPostPrray] = useState(PostsLeft)\n\n    const [users, setUsers] = useState();\n    const [posts, setPosts] = useState();\n\n    let [filteredPosts, setFilteredPosts] = useState([]);\n\n    const getUsersData = async () => {\n        const response = await fetch(\n            \"https://jsonplaceholder.typicode.com/users\"\n        ).then((response) => response.json());\n        setUsers(response);\n    };\n\n    useEffect(() => {\n        getUsersData();\n        // getPostsData();\n        axios.get('https://jsonplaceholder.typicode.com/posts')\n        .then(response => {\n            console.log(response.data);\n            // add random timestamp to each post\n            const tmpposts = response.data.map(post => {\n                const timestamp = Math.floor(Math.random() * 1000000000000);\n                return {...post, timestamp}\n            })\n            setPosts(tmpposts); \n        }, error => {\n            console.log(error);\n        });\n    }, []);\n    // console.log(users)\n    console.log(posts)\n    \n    var username  = localStorage.getItem(\"username\");\n    var newuser = localStorage.getItem(\"newuser\");\n\n    let followList = []\n    if (newuser === true) {\n        followList = []\n    } else {\n        followList = [1, 2, 3]\n    }\n    filteredPosts = posts?.filter(post => followList.includes(post.userId))\n    console.log(filteredPosts)\n\n\n    return (\n\n        <>\n            <header>\n\n                <Topbar />\n                <div className=\"container\">\n                    <NewPostSection username={localStorage.getItem(\"username\")} posts={posts} setPosts={setPosts} />\n                    <Status />\n                </div>\n            </header>\n            <div className=\"pageformat\">\n                <div className=\"gridformat\">\n                    <div className=\"gridpost\" tabIndex={0}>\n                        {filteredPosts?.sort((a,b) => b.timestamp - a.timestamp).map(post => (\n                            <Post2 post={post} key={post.id} username={username} newuser={newuser}/>\n                        ))}\n                        {/* {posts && posts.map((post) => (\n                            <Post2\n                                key={post.id}\n                                post={post}\n                                username={username}\n                                newuser={newuser}\n                            />\n                        ))} */}\n                    </div>\n                </div>\n                <div className=\"gridformat\">\n                    <div className=\"gridpost\" tabIndex={0}>\n\n                    </div>\n                </div>\n            </div>\n\n\n\n            {/* <div className=\"pageformat\">\n                <div className=\"gridformat\">\n                    <div className=\"gridpost\" tabIndex={0}>\n                        {PostArray.map((p) => (\n                            <Post key={p.index} post={p} />\n                        ))}\n                    </div>\n                </div>\n                <div className=\"gridformat\">\n                    <div className=\"gridpost\" tabIndex={0}>\n                        {postarray.map((p) => (\n                            <Post key={p.index} post={p} jsonusers={users} />\n                        ))}\n                    </div>\n                </div>\n            </div> */}\n\n        </>\n\n    )\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}